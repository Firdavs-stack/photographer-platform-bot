const express = require("express");
const router = express.Router();
const Client = require("../models/client"); // –ú–æ–¥–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
const Photographer = require("../models/Photographer"); // –ú–æ–¥–µ–ª—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
const axios = require("axios");
const { setUserState } = require("../utils/stateManager");
const multer = require("multer");
const path = require("path");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
const storage = multer.diskStorage({
	destination: function (req, file, cb) {
		// –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–∞–ø–∫–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è
		console.log(req.body.profilePhoto);
		if (req.body.type === "profile") {
			cb(null, "uploads/photographers"); // –ü—É—Ç—å –¥–ª—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
		} else {
			cb(null, "uploads/portfolio"); // –ü—É—Ç—å –¥–ª—è —Ñ–æ—Ç–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
		}
	},
	filename: function (req, file, cb) {
		cb(null, Date.now() + path.extname(file.originalname)); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
	},
});

// –°–æ–∑–¥–∞–µ–º multer instance
const upload = multer({ storage: storage });

// URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
const botToken = "7456265736:AAH8zdizZ8nvXo2N8kTHmOWIO9yn-1TYYU8"; // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const apiUrl = `https://api.telegram.org/bot${botToken}`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
const sendPhotographerInterface = async (chatId) => {
	const url = `${apiUrl}/sendMessage`;

	const photographerKeyboard = {
		keyboard: [
			[{ text: "üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ" }],
			[{ text: "üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" }],
			[{ text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" }],
			[{ text: "üïí –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏" }],
			[{ text: "üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏" }], // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
			[{ text: "üéü –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è" }], // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
		],
		resize_keyboard: true,
		one_time_keyboard: false,
	};

	try {
		await axios.post(url, {
			chat_id: chatId,
			text: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
			reply_markup: {
				keyboard: photographerKeyboard.keyboard,
				resize_keyboard: photographerKeyboard.resize_keyboard,
				one_time_keyboard: photographerKeyboard.one_time_keyboard,
			},
		});

		setUserState(chatId, "photographer");
	} catch (error) {
		console.error(
			"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
			error.response ? error.response.data : error.message
		);
	}
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
router.get("/", async (req, res) => {
	try {
		const clients = await Client.find();
		res.json(clients);
	} catch (error) {
		res.status(500).json({ message: "Server error", error });
	}
});

//–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –∞–π–¥–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
router.get("/telegram/:telegramId", async (req, res) => {
	try {
		const client = await Client.findOne({
			telegramId: req.params.telegramId,
		});
		if (!client) {
			return res.status(404).json({ message: "Client not found" });
		}
		res.json(client);
	} catch (error) {
		res.status(500).json({ message: "Server error", error });
	}
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
router.get("/:id", async (req, res) => {
	try {
		const client = await Client.findById(req.params.id);
		if (!client) {
			return res.status(404).json({ message: "Client not found" });
		}
		res.json(client);
	} catch (error) {
		res.status(500).json({ message: "Server error", error });
	}
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–º–æ—É—à–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ
// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–º–æ—É—à–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
router.post("/:id/promote", upload.any(), async (req, res) => {
	try {
		const clientId = req.params.id;
		const type = req.body.type; // –ò–∑–≤–ª–µ–∫–∞–µ–º `type` –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

		console.log(req.body);
		if (!type) {
			return res
				.status(400)
				.json({ message: "Type is required in the request body" });
		}
		console.log(req.type);
		if (type === "profile") {
			// **1. –ü—Ä–æ–º–æ—É—à–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞**
			const client = await Client.findById(clientId);
			if (!client) {
				return res.status(404).json({ message: "Client not found" });
			}
			console.log(client);
			// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
			const newPhotographerData = {
				firstName: client.name,
				lastName: req.body.lastName,
				telegramId: client.telegramId,
				telegramUsername: client.telegramUsername,
				phoneNumber: client.phone,
				age: req.body.age,
				experience: req.body.experience,
				favoriteStyles: req.body.favoriteStyles,
				hourlyRate: req.body.hourlyRate,
				sessionTypes: req.body.sessionTypes,
				status: req.body.status,
				telegramId: client.telegramId,
				portfolio: [],
			};

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω
			if (req.files) {
				const profilePhoto = req.files.find((file) =>
					file.mimetype.startsWith("image/")
				);
				if (profilePhoto) {
					newPhotographerData.profilePhoto = profilePhoto.path;
				}
			}

			// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –∏ —É–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			const newPhotographer = new Photographer(newPhotographerData);
			await newPhotographer.save();
			await Client.findByIdAndDelete(clientId);

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
			sendPhotographerInterface(newPhotographer.telegramId);
			res.json({
				message: "Client promoted to photographer successfully",
				photographer: newPhotographer,
			});
		} else if (type === "portfolio") {
			// **2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞**
			const photographer = await Photographer.findById(clientId); // –ò—â–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –ø–æ ID (—Ç—É—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `clientId` –∫–∞–∫ ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞)
			if (!photographer) {
				return res
					.status(404)
					.json({ message: "Photographer not found" });
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ –∑–∞–ø—Ä–æ—Å–µ
			if (req.files) {
				for (const file of req.files) {
					photographer.portfolio.push(file.path); // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
				}
				await photographer.save();
				return res.json({
					message: "Photos successfully added to portfolio",
					portfolio: photographer.portfolio,
				});
			} else {
				return res
					.status(400)
					.json({ message: "No files provided for portfolio" });
			}
		} else {
			// –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
			return res.status(400).json({ message: `Unknown type: ${type}` });
		}
	} catch (error) {
		console.error("Error promoting client or adding to portfolio:", error);
		res.status(500).json({ message: "Server error", error });
	}
});

module.exports = router;
