const clientController = require("./clientController");
const photographerController = require("./photographerController");
const stateController = require("../controllers/stateController");
const Booking = require("../models/booking");
const Photographer = require("../models/Photographer");
const { ObjectId } = require("mongodb");
const Client = require("../models/client");
const booking = require("../models/booking");

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
const photographerDefaultCommands = [
	"üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
	"üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
	"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
	"üïí –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏",
	"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã",
	"üéü –°—Å—ã–ª–∫–∞",
];
const clientDefaultCommands = [
	"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
	"üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
	"üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç",
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∫–æ–º–∞–Ω–¥–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function isDefaultCommand(data, defaultCommands) {
	return defaultCommands.includes(data);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query
async function handleCallbackQuery(bot, query) {
	const chatId = query.message.chat.id;
	const data = query.data;
	const state = await stateController.getState(chatId);

	if (
		isDefaultCommand(data, photographerDefaultCommands) ||
		isDefaultCommand(data, clientDefaultCommands)
	) {
		return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –æ–¥–Ω–∞ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ
	const client = await clientController.getClientByTelegramId(chatId);
	const photographer =
		await photographerController.getPhotographerByTelegramId(chatId);

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º toggleTime
	if (data.startsWith("toggle_time;")) {
		if (!photographer) {
			await bot.sendMessage(
				chatId,
				"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ."
			);
			return;
		}
		await toggleTime(bot, chatId, query, data, photographer, state);
		return;
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
	if (data === "time_selection_done") {
		if (!state) {
			await bot.sendMessage(
				chatId,
				"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
			);
			return;
		}
		if (!photographer) {
			await bot.sendMessage(
				chatId,
				"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ."
			);
			return;
		}
		await timeSelectionDone(bot, chatId, query, photographer, state);
		return;
	}

	if (client) {
		await handleClientCallback(bot, chatId, query, data, client);
	} else if (photographer) {
		console.log(photographer, "HOHO");
		await handlePhotographerCallback(
			bot,
			chatId,
			query,
			data,
			photographer,
			state
		);
	} else {
		bot.sendMessage(
			chatId,
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start."
		);
	}
}

// –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –¥–ª—è callback_query –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤
async function handleClientCallback(bot, chatId, query, data, client) {
	if (isDefaultCommand(data, clientDefaultCommands)) {
		return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –æ–¥–Ω–∞ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
	if (data.startsWith("accept_reschedule_client;")) {
		await acceptRescheduleClient(bot, chatId, data, client);
	} else if (data.startsWith("decline_reschedule_client;")) {
		await declineRescheduleClient(bot, chatId, data, client);
	} else if (data.startsWith("client_reschedule;")) {
		// await initiateClientReschedule(bot, chatId, data, client);
	} else if (data.startsWith("select_time;")) {
		await selectTimeForBooking(bot, chatId, data, client);
	} else if (data.startsWith("select_date;")) {
		await selectDateForBooking(bot, chatId, data, client);
	} else if (data.startsWith("book:")) {
		await showAvailableDates(bot, chatId, data, client);
	} else if (data.startsWith("level:")) {
		await showPhotographersByLevel(bot, chatId, data);
	} else if (data.startsWith("page:")) {
		await handlePagination(bot, chatId, data);
	} else if (data.startsWith("confirm_booking;")) {
		await confirmBooking(bot, chatId, data, client);
	} else {
		bot.sendMessage(
			chatId,
			"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
		);
	}
}

// –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
async function acceptRescheduleClient(bot, chatId, data, client) {
	if (isDefaultCommand(data, clientDefaultCommands)) {
		return;
	}

	const bookingId = data.split(";")[1];
	const booking = await Booking.findById(bookingId);

	if (!booking || booking.clientId.toString() !== client._id.toString()) {
		bot.sendMessage(chatId, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
		return;
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤–æ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
	booking.date = booking.reschedule.newDate;
	booking.timeSlot = booking.reschedule.newTimeSlot;
	booking.status = "approved";
	booking.reschedule.status = "accepted";
	await booking.save();

	// –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
	const photographer = await photographerController.getPhotographerById(
		booking.photographerId
	);
	bot.sendMessage(
		photographer.telegramId,
		`–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${booking.date} –≤ ${booking.timeSlot} –ø—Ä–∏–Ω—è—Ç –∫–ª–∏–µ–Ω—Ç–æ–º.`
	);
	bot.sendMessage(chatId, "–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.");
}

// –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
async function declineRescheduleClient(bot, chatId, data, client) {
	if (isDefaultCommand(data, clientDefaultCommands)) {
		return;
	}

	const bookingId = data.split(";")[1];
	const booking = await Booking.findById(bookingId);

	if (!booking || booking.clientId.toString() !== client._id.toString()) {
		bot.sendMessage(chatId, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
		return;
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
	booking.reschedule.status = "declined";
	await booking.save();

	// –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
	const photographer = await photographerController.getPhotographerById(
		booking.photographerId
	);
	bot.sendMessage(
		photographer.telegramId,
		`–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${booking.reschedule.newDate} –≤ ${booking.reschedule.newTimeSlot} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º.`
	);
	bot.sendMessage(chatId, "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤
async function handlePhotographerCallback(
	bot,
	chatId,
	query,
	data,
	photographer,
	state
) {
	console.log(photographer, "SEVARA");
	if (isDefaultCommand(data, photographerDefaultCommands)) {
		return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –æ–¥–Ω–∞ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
	}

	switch (true) {
		case data.startsWith("confirm_payment;"):
			await confirmPayment(bot, query, photographer);
			break;
		case data.startsWith("toggle_time;"):
			await toggleTime(bot, chatId, query, data, photographer, state);
			break;
		case data.startsWith("time_selection_done"):
			await timeSelectionDone(bot, chatId, query, photographer, state);
			break;
		case data.startsWith("reschedule_time_selection_done"):
			await rescheduleTimeSelectionDone(
				bot,
				chatId,
				query,
				photographer,
				state
			);
			break;
		case data.startsWith("reject_payment;"):
			await rejectPayment(bot, query, photographer);
			break;
		case data.startsWith("photographer_reschedule;"):
			await initiatePhotographerReschedule(bot, chatId, photographer);
			break;
		case data.startsWith("photographer_reschedule_date_"):
			await handlePhotographerReschedule(bot, query, photographer);
			break;
		case data.startsWith("accept_reschedule;"):
			await acceptReschedule(bot, query, photographer);
			break;
		case data.startsWith("decline_reschedule;"):
			await declineReschedule(bot, query, photographer);
			break;
		case data.startsWith("delete_photo_"):
			await deletePhoto(bot, query, photographer);
			break;
		case data.startsWith("edit_photo_"):
			await editPhotoInfo(bot, query, photographer);
			break;
		// –§—É–Ω–∫—Ü–∏–∏, –≤—ã–∑—ã–≤–∞–µ–º—ã–µ —á–µ—Ä–µ–∑ photographerController, –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
		case data === "portfolio_add_photos":
			await photographerController.startPortfolioPhotoUpload(
				bot,
				chatId,
				query
			);
			break;
		case data === "portfolio_view":
			await photographerController.viewPortfolio(
				bot,
				chatId,
				photographer
			);
			break;
		case data === "portfolio_delete_photo":
			await photographerController.showPortfolioForDeletion(
				bot,
				chatId,
				photographer
			);
			break;
		case data === "portfolio_edit_info":
			await photographerController.showPortfolioForEditing(
				bot,
				chatId,
				photographer
			);
			break;
		default:
			bot.sendMessage(
				chatId,
				"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
			);
			break;
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async function initiatePhotographerReschedule(bot, chatId, photographerId) {
	// –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
	const photographer = await Photographer.findById(photographerId);

	if (
		!photographer ||
		!photographer.schedule ||
		photographer.schedule.length === 0
	) {
		bot.sendMessage(chatId, "–£ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.");
		return;
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
	const availableDates = photographer.schedule.map((s) =>
		s.date.toISOString().slice(0, 10)
	);

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
	if (availableDates.length === 0) {
		bot.sendMessage(
			chatId,
			"–£ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
		);
		return;
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
	const dateButtons = availableDates.map((date) => [
		{ text: date, callback_data: `photographer_reschedule_date_${date}` },
	]);

	stateController.setState(chatId, "");
	bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", {
		reply_markup: {
			inline_keyboard: dateButtons,
		},
	});
}

async function handlePhotographerReschedule(bot, query, photographer) {
	const chatId = query.message.chat.id;
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
	const date = query.data.split("_")[3];

	let state = await stateController.getState(chatId);

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
	const photographerSchedule = await photographer.schedule.find(
		(s) => s.date.toISOString().slice(0, 10) === date
	).availableSlots;

	if (!photographerSchedule || photographerSchedule.length === 0) {
		bot.sendMessage(
			chatId,
			"–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤."
		);
		return;
	}
	console.log(photographerSchedule);

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º selectedHours
	await stateController.setState(chatId, {
		state: "awaiting_rechedule_date",
		date: date,
	});

	bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", {
		reply_markup: {
			inline_keyboard:
				await photographerController.generateTimeSlotsKeyboard(
					"reschedule",
					date,
					[],
					photographerSchedule,
					chatId
				),
		},
	});

	// –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
	if (state && state.state === "photographer_reschedule_time") {
		const { selectedDate } = state;

		const selectedTime = msg.text;

		// –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
		// –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞

		bot.sendMessage(
			chatId,
			`–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ ${selectedDate} –≤ ${selectedTime}.`
		);

		// –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		stateController.clearState(chatId);
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
async function confirmPayment(bot, query, photographer) {
	try {
		const bookingId = query.data.split(";")[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
		console.log("Booking ID:", bookingId);

		// –ù–∞—Ö–æ–¥–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID
		const booking = await Booking.findById(bookingId);
		if (!booking) {
			return bot.sendMessage(
				query.message.chat.id,
				"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
			);
		}

		// –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
		const client = await Client.findById(booking.clientId);
		if (!client) {
			return bot.sendMessage(query.message.chat.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
		booking.status = "confirmed"; // –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
		await booking.save();

		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º telegramId
		await bot.sendMessage(
			client.telegramId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegramId –∫–ª–∏–µ–Ω—Ç–∞
			`–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${booking.date} –≤ ${booking.timeSlot} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!`
		);

		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É
		await bot.sendMessage(query.message.chat.id, "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É.");
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:", error);
		await bot.sendMessage(
			query.message.chat.id,
			"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		);
	}
}

//–û—Ç–∫–∞–∑ –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async function rejectPayment(bot, query, photographer) {
	try {
		const bookingId = query.data.split(";")[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
		console.log("Booking ID:", bookingId);

		// –ù–∞—Ö–æ–¥–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID
		const booking = await Booking.findById(bookingId);
		if (!booking) {
			return bot.sendMessage(
				query.message.chat.id,
				"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
			);
		}

		// –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
		const client = await Client.findById(booking.clientId);
		if (!client) {
			return bot.sendMessage(query.message.chat.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
		booking.status = "cancelled"; // –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
		await booking.save();

		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º telegramId
		await bot.sendMessage(
			client.telegramId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegramId –∫–ª–∏–µ–Ω—Ç–∞
			`–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${booking.date} –≤ ${booking.timeSlot} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!`
		);

		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É
		await bot.sendMessage(query.message.chat.id, "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –æ–ø–ª–∞—Ç—É.");
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:", error);
		await bot.sendMessage(
			query.message.chat.id,
			"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		);
	}
}

async function confirmBooking(bot, chatId, data, client) {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º bookingId –∏–∑ —Å—Ç—Ä–æ–∫–∏
	const bookingId = data.split(";")[1];

	try {
		const booking = await Booking.findById(bookingId);
		const photographer = await Photographer.findById(
			booking.photographerId
		);
		console.log(booking);
		if (!booking) {
			bot.sendMessage(chatId, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
			return;
		}

		// –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ "awaiting_payment"
		booking.status = "awaiting_prepayment";
		await booking.save();

		// –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö
		bot.sendMessage(
			chatId,
			`–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ 40% –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã. –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n${
				photographer.paymentDetails
					? photographer.paymentDetails
					: "–†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω—É"
			}`
		);

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã
		const state = { state: "awaiting_payment", bookingInfo: booking };
		stateController.setState(chatId, state);
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
		bot.sendMessage(
			chatId,
			"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
		);
	}
}
async function deletePhoto(bot, query, photographer) {
	if (isDefaultCommand(query.data, photographerDefaultCommands)) {
		return;
	}

	const chatId = query.message.chat.id;
	const photoIndex = parseInt(query.data.split("_")[2], 10);
	console.log(query.data);

	if (
		isNaN(photoIndex) ||
		photoIndex < 0 ||
		photoIndex >= photographer.portfolio.length
	) {
		await bot.sendMessage(
			chatId,
			"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
		);
		return;
	}

	const deletedPhoto = photographer.portfolio.splice(photoIndex, 1);

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
	await photographer.save();

	await bot.sendMessage(
		chatId,
		`–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è "${
			deletedPhoto[0].title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
		}" –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.`
	);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
async function toggleTime(bot, chatId, query, data, photographer, state) {
	if (isDefaultCommand(data, photographerDefaultCommands)) {
		return;
	}
	const availableSlots = state?.availableSlots;
	if (!state) {
		await bot.sendMessage(
			chatId,
			"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
		);
		return;
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è selectedHours, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
	if (!state.selectedHours) {
		state.selectedHours = [];
	}

	const hour = parseInt(data.split(";")[1]);
	const isReschedule = data.split(";")[2];
	console.log(isReschedule, "SISKA");
	const timeSlot = `${hour.toString().padStart(2, "0")}:00-${(hour + 1)
		.toString()
		.padStart(2, "0")}:00`;

	const existingBookings = await Booking.find({
		photographerId: photographer._id,
		date: state.date,
		timeSlot,
	});

	if (existingBookings.length > 0) {
		await bot.answerCallbackQuery(query.id, {
			text: "–≠—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω.",
			show_alert: true,
		});
		return;
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–±–æ—Ä —Å–æ—Å–µ–¥–Ω–∏—Ö —Å–ª–æ—Ç–æ–≤
	if (state.selectedHours.length > 0 && isReschedule == 1) {
		const minSelected = Math.min(...state.selectedHours);
		const maxSelected = Math.max(...state.selectedHours);

		if (hour !== minSelected - 1 && hour !== maxSelected + 1) {
			await bot.answerCallbackQuery(query.id, {
				text: "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ—Å–µ–¥–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏.",
				show_alert: true,
			});
			return;
		}
	}

	if (state.selectedHours.includes(hour)) {
		state.selectedHours = state.selectedHours.filter((h) => h !== hour);
	} else {
		state.selectedHours.push(hour);
	}

	const keyboard =
		isReschedule == 1
			? await photographerController.generateTimeSlotsKeyboard(
					"reschedule",
					state.date,
					state.selectedHours,
					availableSlots,
					chatId
			  )
			: await photographerController.generateTimeSlotsKeyboard(
					"",
					state.date,
					state.selectedHours,
					[],
					""
			  );

	await bot.editMessageReplyMarkup(
		{
			inline_keyboard: keyboard,
		},
		{
			chat_id: chatId,
			message_id: query.message.message_id,
		}
	);

	await bot.answerCallbackQuery(query.id);
}

async function rescheduleTimeSelectionDone(
	bot,
	chatId,
	query,
	photographer,
	state
) {
	if (!state.selectedHours || state.selectedHours.length === 0) {
		await bot.sendMessage(
			chatId,
			"–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞."
		);
		return;
	}

	const date = state.date;
	const selectedHours = state.selectedHours.sort((a, b) => a - b);

	// –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
	const startHour = selectedHours[0];
	const endHour = selectedHours[selectedHours.length - 1] + 1;
	const newTimeRange = `${startHour.toString().padStart(2, "0")}:00-${endHour
		.toString()
		.padStart(2, "0")}:00`;

	try {
		// –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –∏ –¥–∞—Ç—ã
		const existingBooking = await Booking.findOne({
			photographerId: photographer._id,
			date: date, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç// –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
		});

		console.log(existingBooking, "SHLUXA");

		if (existingBooking) {
			// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
			existingBooking.timeSlot = newTimeRange;
			await existingBooking.save();

			await bot.sendMessage(
				chatId,
				`–í–∞—à–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: ${newTimeRange}`
			);
		} else {
			await bot.sendMessage(
				chatId,
				"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è."
			);
		}
	} catch (error) {
		console.error("Error during rescheduling:", error);
		await bot.sendMessage(
			chatId,
			"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
		);
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
async function timeSelectionDone(bot, chatId, query, photographer, state) {
	if (!state.selectedHours || state.selectedHours.length === 0) {
		await bot.sendMessage(
			chatId,
			"–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞."
		);
		return;
	}

	const date = state.date;
	console.log(state);
	const selectedHours = state.selectedHours;

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Å—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
	const newAvailableSlots = selectedHours.map((hour) => {
		return `${hour.toString().padStart(2, "0")}:00-${(hour + 1)
			.toString()
			.padStart(2, "0")}:00`;
	});

	// –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
	let scheduleForDate = photographer.schedule.find(
		(s) =>
			s.date.toISOString().slice(0, 10) ===
			new Date(date).toISOString().slice(0, 10)
	);

	if (scheduleForDate) {
		// –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
		console.log("Updating existing scheduleForDate");
		scheduleForDate.availableSlots = newAvailableSlots;
	} else {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
		console.log("Creating new scheduleForDate");
		scheduleForDate = {
			date: new Date(date),
			availableSlots: newAvailableSlots,
		};
		photographer.schedule.push(scheduleForDate);
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	console.log("Updated scheduleForDate:", scheduleForDate);

	// –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ schedule –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ
	photographer.markModified("schedule");

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	try {
		await photographer.save();
		console.log("Photographer saved successfully");
	} catch (error) {
		console.error("Error saving photographer:", error);
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	await stateController.clearState(chatId);

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
	const updatedPhotographer = await Photographer.findById(photographer._id);
	console.log("Photographer after save:", updatedPhotographer.schedule);

	await bot.sendMessage(
		chatId,
		`–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –Ω–∞ ${date}.`
	);
}

module.exports = { handleCallbackQuery };
