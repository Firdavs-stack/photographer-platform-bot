// controllers/photographerController.js

const Photographer = require("../models/Photographer");
const Booking = require("../models/booking");
const Client = require("../models/client");
const stateController = require("./stateController");
const axios = require("axios");
const fs = require("fs");

const sourceDir = path.resolve(__dirname, "../../..");

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤
const photographerDefaultCommands = [
	"üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
	"üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
	"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
	"üïí –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏",
	"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã",
	"üéü –°—Å—ã–ª–∫–∞",
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∫–æ–º–∞–Ω–¥–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function isDefaultCommand(data, defaultCommands) {
	return defaultCommands.includes(data);
}

async function getCurrentBotState() {
	return await stateController.getState();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –ø–æ Telegram ID
async function getPhotographerByTelegramId(telegramId) {
	return await Photographer.findOne({ telegramId: telegramId.toString() });
}

async function showPortfolioForEditing(bot, chatId, photographer) {
	if (photographer.portfolio.length === 0) {
		await bot.sendMessage(chatId, "–í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ.");
		return;
	}

	await stateController.setState(chatId, {
		state: "awaiting_portfolio_info_for_editing",
	});

	const portfolioMessages = photographer.portfolio.map((photo, index) => {
		return {
			type: "photo",
			media: photo.imagePath,
			caption: `–§–æ—Ç–æ #${index + 1}\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${
				photo.title
			}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${photo.category}`,
			parse_mode: "Markdown",
		};
	});

	await bot.sendMediaGroup(chatId, portfolioMessages);

	console.log(state);
	await bot.sendMessage(
		chatId,
		"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–æ—Ç–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–Ω–æ–º–µ—Ä; –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ; –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'",
		{
			reply_markup: {
				force_reply: true,
			},
		}
	);
}

async function showPortfolioForDeletion(bot, chatId, photographer) {
	if (!photographer.portfolio || photographer.portfolio.length === 0) {
		await bot.sendMessage(chatId, "–í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ.");
		return;
	}

	const keyboard = photographer.portfolio.map((photo, index) => [
		{
			text: `–£–¥–∞–ª–∏—Ç—å: ${photo.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}`,
			callback_data: `delete_photo_${index}`,
		},
	]);

	await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", {
		reply_markup: {
			inline_keyboard: keyboard,
		},
	});
}

async function viewPortfolio(bot, chatId, photographer) {
	if (photographer.portfolio.length === 0) {
		bot.sendMessage(
			chatId,
			"–í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ. –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ."
		);
	} else {
		for (const photo of photographer.portfolio) {
			await bot.sendPhoto(chatId, photo.imagePath, {
				caption: `–ù–∞–∑–≤–∞–Ω–∏–µ: ${photo.title}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${photo.category}`,
			});
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
async function handlePhotographerMessage(bot, msg, photographer) {
	const chatId = msg.chat.id;
	const text = msg.text.trim();
	let state = await stateController.getState(chatId);
	console.log(chatId);
	console.log(text, state, "MAMAMAM");
	if (isDefaultCommand(text, photographerDefaultCommands) && state) {
		await stateController.clearState(chatId);
		state = null; // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é state –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
	if (state) {
		switch (state.state) {
			case "accept_reschedule_photographer":
				booking.status = "rescheduled";
				booking.reschedule.status = "accepted";
				await booking.save();

				bot.sendMessage(
					chatId,
					`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏–Ω—è—Ç. –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${booking.reschedule.newDate} –≤ ${booking.reschedule.newTimeSlot} –±—ã–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.`
				);

				const client = await Client.findById(booking.clientId);
				bot.sendMessage(
					client.telegramId,
					`–í–∞—à–µ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${booking.reschedule.newDate} –≤ ${booking.reschedule.newTimeSlot} –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–º.`
				);

				break;

			case "decline_reschedule_photographer":
				booking.status = "declined";
				booking.reschedule.status = "declined";
				await booking.save();

				bot.sendMessage(
					chatId,
					`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ø—Ä–µ–∂–Ω–µ–º –≤—Ä–µ–º–µ–Ω–∏.`
				);

				const clientDecline = await Client.findById(booking.clientId);
				bot.sendMessage(
					clientDecline.telegramId,
					`–í–∞—à–µ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–º.`
				);
				break;
			case "awaiting_portfolio_photos":
				await chooseNamingPortfolioPhotos(bot, chatId, text, state);
				break;

			case "awaiting_profile_update":
				// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
				const [firstName, lastName, phone] = text
					.split(";")
					.map((entry) => entry.trim());

				console.log(firstName, lastName, phone);

				if (!firstName || !lastName || !/^[+]\d{9,15}$/.test(phone)) {
					bot.sendMessage(
						chatId,
						"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: '–ò–º—è; –§–∞–º–∏–ª–∏—è; –¢–µ–ª–µ—Ñ–æ–Ω' (–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: +123456789)."
					);
					return;
				}
				console.log(phone);
				photographer.firstName = firstName;
				photographer.lastName = lastName;
				photographer.phoneNumber = phone;
				await photographer.save();

				await stateController.clearState(chatId);

				bot.sendMessage(chatId, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
				break;
			case "awaiting_portfolio_info_for_editing":
				const [numb, newNaming, newCategory] = text
					.split(";")
					.map((entry) => entry.trim);
				bot.sendMessage(
					chatId,
					`–í—ã –≤–≤–µ–ª–∏ ${(numb, newNaming, newCategory)}`
				);
				break;
			case "awaiting_payment_details":
				console.log(text);
				photographer.paymentDetails = text;
				await photographer.save();

				await stateController.clearState(chatId);

				bot.sendMessage(
					chatId,
					"–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞ –æ–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
				);
				break;
			case "awaiting_date":
				await checkTheBookingDate(bot, text, chatId, photographer);
				break;

			default:
				bot.sendMessage(
					chatId,
					"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
				);
				break;
		}
		return;
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
	switch (text) {
		case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
			bot.sendMessage(
				chatId,
				`–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: ${photographer.firstName}\n–§–∞–º–∏–ª–∏—è: ${photographer.lastName}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${photographer.phoneNumber}\n\n–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–º—è; –§–∞–º–∏–ª–∏—è; –¢–µ–ª–µ—Ñ–æ–Ω'.`
			);
			await stateController.setState(chatId, {
				state: "awaiting_profile_update",
			});
			break;
		case "üéü –°—Å—ã–ª–∫–∞":
			await sendInvitationLink(bot, chatId, photographer._id);
			break;
		case "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã":
			if (photographer.paymentDetails) {
				bot.sendMessage(
					chatId,
					`–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n${photographer.paymentDetails}\n\n–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.`
				);
			} else {
				bot.sendMessage(
					chatId,
					"–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã."
				);
			}
			await stateController.setState(chatId, {
				state: "awaiting_payment_details",
			});
			break;

		case "üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ":
			console.log(text);
			showPortfolioMenu(bot, chatId);
			break;

		case "üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
			await showPhotographerBookings(bot, chatId, photographer);
			break;

		case "üïí –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏":
			await choosePhotographerTimeSlots(bot, chatId);
			break;

		default:
			bot.sendMessage(
				chatId,
				"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
			);
			break;
	}
}

async function showPhotographerBookings(bot, chatId, photographer) {
	const bookings = await Booking.find({ photographerId: photographer._id });

	if (bookings.length === 0) {
		bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.");
	} else {
		for (const booking of bookings) {
			let message = `–ö–ª–∏–µ–Ω—Ç: ${booking.clientName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
–î–∞—Ç–∞: ${new Date(booking.date).toISOString().slice(0, 10)}
–í—Ä–µ–º—è: ${booking.timeSlot}
–°—Ç–∞—Ç—É—Å: ${booking.status}
`;

			const buttons = [];

			if (
				[
					"approved",
					"awaiting_prepayment",
					"awaiting_confirmation",
					"confirmed",
				].includes(booking.status)
			) {
				buttons.push([
					{
						text: "–ü–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å",
						callback_data: `photographer_reschedule;${booking._id}`,
					},
				]);
			}

			if (
				booking.reschedule &&
				booking.reschedule.requestedBy === "client" &&
				booking.reschedule.status === "pending"
			) {
				message += `–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:
–ù–æ–≤–∞—è –¥–∞—Ç–∞: ${new Date(booking.reschedule.newDate).toISOString().slice(0, 10)}
–ù–æ–≤–æ–µ –≤—Ä–µ–º—è: ${booking.reschedule.newTimeSlot}
`;

				buttons.push([
					{
						text: "–ü—Ä–∏–Ω—è—Ç—å",
						callback_data: `accept_reschedule;${booking._id}`,
					},
					{
						text: "–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
						callback_data: `decline_reschedule;${booking._id}`,
					},
				]);
			}

			if (buttons.length > 0) {
				bot.sendMessage(chatId, message, {
					reply_markup: { inline_keyboard: buttons },
				});
			} else {
				bot.sendMessage(chatId, message);
			}
		}
	}
}

async function checkTheBookingDate(bot, text, chatId, photographer) {
	if (isDefaultCommand(text, photographerDefaultCommands)) {
		return;
	}

	const dateText =
		text.toLowerCase() === "—Å–µ–≥–æ–¥–Ω—è"
			? new Date().toISOString().slice(0, 10)
			: text;

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
	if (!/^\d{4}-\d{2}-\d{2}$/.test(dateText)) {
		await bot.sendMessage(
			chatId,
			'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "—Å–µ–≥–æ–¥–Ω—è".'
		);
		return;
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
	const existingSchedule = photographer.schedule.find(
		(s) => s.date.toISOString().slice(0, 10) === dateText
	);
	const selectedSlots = existingSchedule
		? existingSchedule.availableSlots.map((slot) =>
				parseInt(slot.split(":")[0])
		  )
		: [];
	console.log("START");
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º–∏
	const keyboard = await generateTimeSlotsKeyboard(
		"",
		dateText,
		selectedSlots,
		[],
		""
	);

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	await stateController.setState(chatId, {
		state: "selecting_time_slots",
		date: dateText,
		selectedHours: selectedSlots,
	});

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	await bot.sendMessage(
		chatId,
		`–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –¥–ª—è –¥–∞—Ç—ã ${dateText}:`,
		{
			reply_markup: { inline_keyboard: keyboard },
		}
	);
}

async function choosePhotographerTimeSlots(bot, chatId) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–º
	const photographer = await Photographer.findOne({
		telegramId: chatId.toString(),
	});

	if (!photographer) {
		bot.sendMessage(chatId, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ.");
		return;
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
	await stateController.setState(chatId, {
		state: "awaiting_date",
		date: null,
		selectedHours: [], // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
	});

	bot.sendMessage(
		chatId,
		'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "—Å–µ–≥–æ–¥–Ω—è":'
	);
}

async function startPortfolioPhotoUpload(bot, chatId, query) {
	// –ó–¥–µ—Å—å –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ photographerController
	bot.sendMessage(
		chatId,
		"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."
	);
	await stateController.setState(chatId, {
		state: "awaiting_portfolio_photos",
		tempPhotos: [],
	});
}

async function chooseNamingPortfolioPhotos(bot, chatId, text, state) {
	if (isDefaultCommand(text, photographerDefaultCommands)) {
		return;
	}

	console.log(state);
	const tempPhotos = state.tempPhotos || [];
	const photographer = await Photographer.findOne({
		telegramId: chatId.toString(),
	});

	console.log(tempPhotos, photographer);

	if (text !== "/done") {
		// –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–∞—Ä—ã "–ù–∞–∑–≤–∞–Ω–∏–µ; –ö–∞—Ç–µ–≥–æ—Ä–∏—è" –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é "|"
		const entries = text.split("|").map((entry) => entry.trim());
		if (entries.length !== tempPhotos.length) {
			bot.sendMessage(
				chatId,
				"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
			);
			return;
		}

		for (let i = 0; i < entries.length; i++) {
			const [title, category] = entries[i]
				.split(";")
				.map((s) => s.trim());
			tempPhotos[i].title = title || "";
			tempPhotos[i].category = category || "";
		}

		await stateController.setState(chatId, { ...state, tempPhotos });

		bot.sendMessage(
			chatId,
			"–ù–∞–∑–≤–∞–Ω–∏—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ /done, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å."
		);
	} else {
		if (tempPhotos.length === 0) {
			bot.sendMessage(chatId, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.");
			return;
		}
		console.log(tempPhotos);
		await savePhotosToPortfolio(bot, photographer, tempPhotos, chatId);

		await stateController.clearState(chatId);
		bot.sendMessage(chatId, "–ö–∞—Ä—Ç–∏–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã");
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
async function savePhotosToPortfolio(bot, photographer, tempPhotos, chatId) {
	try {
		for (const photo of tempPhotos) {
			const file = await bot.getFile(photo.file_id);
			const filePath = file.file_path;
			console.log(file, filePath);
			const downloadUrl = `https://api.telegram.org/file/bot${bot.token}/${filePath}`;

			const axiosResponse = await axios.get(downloadUrl, {
				responseType: "stream",
			});
			const filename = `${path.resolve(
				sourceDir,
				"two2one.uz/images/portfolio"
			)}${Date.now()}_${photo.file_id}.png`;
			console.log("SIIIU", file);
			const writer = fs.createWriteStream(filename);
			axiosResponse.data.pipe(writer);

			await new Promise((resolve, reject) => {
				writer.on("finish", resolve);
				writer.on("error", reject);
			});

			photographer.portfolio.push({
				imagePath: filename,
				title: photo.title,
				category: photo.category,
			});
		}

		await photographer.save();
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:", error);
		bot.sendMessage(
			chatId,
			"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		);
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
function showPortfolioMenu(bot, chatId) {
	bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:", {
		reply_markup: {
			inline_keyboard: [
				[
					{
						text: "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
						callback_data: "portfolio_add_photos",
					},
				],
				[
					{
						text: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
						callback_data: "portfolio_view",
					},
				],
				[
					{
						text: "–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é",
						callback_data: "portfolio_delete_photo",
					},
				],
				[
					{
						text: "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
						callback_data: "portfolio_edit_info",
					},
				],
			],
		},
	});
}

async function generateInvitationLink(photographerId) {
	const link = `https://t.me/two2onestudio_bot?start=invite_${photographerId}`;

	// –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Å—ã–ª–∫–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º–∏ –∏–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
	return link;
}

async function sendInvitationLink(bot, chatId, photographerId) {
	const link = await generateInvitationLink(photographerId);
	await bot.sendMessage(
		chatId,
		`–í–æ—Ç –≤–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤: ${link}`
	);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º–∏
async function generateTimeSlotsKeyboard(
	type = "default",
	dateText,
	selectedHours = [],
	availableDates = [],
	chatId = ""
) {
	console.log(type, "END");
	const timeSlots = [];
	const isReschedule = type == "reschedule" ? 1 : 0;
	if (isReschedule == 1) {
		stateController.updateState(chatId, { availableSlots: availableDates });
		console.log(availableDates, "GANDON");
		availableDates.forEach((timeSlot) => {
			const slotText = String(timeSlot);
			const hour = parseInt(slotText.split("-")[0].split(":")[0]);
			console.log(selectedHours, "siu");
			const isSelected = selectedHours.includes(hour);
			timeSlots.push({
				text: isSelected ? `‚úÖ ${timeSlot}` : timeSlot,
				callback_data: `toggle_time;${hour};${isReschedule}`,
			});
		});
	} else {
		console.log("–í–°–ï –ß–ï–¢–ö–û");
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
		for (let hour = 0; hour < 24; hour++) {
			const timeSlot = `${hour.toString().padStart(2, "0")}:00-${(
				hour + 1
			)
				.toString()
				.padStart(2, "0")}:00`;
			console.log(selectedHours, "siu");
			const isSelected = selectedHours.includes(hour);
			timeSlots.push({
				text: isSelected ? `‚úÖ ${timeSlot}` : timeSlot,
				callback_data: `toggle_time;${hour};${isReschedule}`,
			});
		}
	}

	// –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3
	const keyboard = [];
	for (let i = 0; i < timeSlots.length; i += 3) {
		keyboard.push(timeSlots.slice(i, i + 3));
	}
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
	keyboard.push([
		{
			text: "–ì–æ—Ç–æ–≤–æ",
			callback_data:
				type == "reschedule"
					? `reschedule_time_selection_done_${dateText}`
					: `time_selection_done_${dateText}`,
		},
	]);

	return keyboard;
}
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
	handlePhotographerMessage,
	showPortfolioMenu,
	savePhotosToPortfolio,
	getPhotographerByTelegramId,
	generateTimeSlotsKeyboard,
	chooseNamingPortfolioPhotos,
	getCurrentBotState,
	startPortfolioPhotoUpload,
	showPhotographerBookings,
	viewPortfolio,
	showPortfolioForDeletion,
	showPortfolioForEditing,
	isDefaultCommand,
};
