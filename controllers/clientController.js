// controllers/clientController.js

const Client = require("../models/client");
const Booking = require("../models/booking");
const Photographer = require("../models/Photographer");
const stateController = require("./stateController");
const { isDefaultCommand } = require("./photographerController");

async function handleClientStart(bot, msg, client) {
	const chatId = msg.chat.id;
	const text = msg.text;

	if (text.startsWith("/start invite_")) {
		const [_, photographerId, token] = text.split("_");

		// –ù–∞–π–¥–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –ø–æ `photographerId` –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		const photographer = await Photographer.findById(photographerId);
		if (!photographer) {
			bot.sendMessage(chatId, "–§–æ—Ç–æ–≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
			return;
		}

		// –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –µ—Å–ª–∏ –≤—ã –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

		// –°–≤—è–∂–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–º
		client.photographerId = photographerId;
		await client.save();

		bot.sendMessage(
			chatId,
			`–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É ${photographer.firstName} ${photographer.lastName}.`
		);
	}
}
async function handleClientMessage(bot, msg, client) {
	const clientDefaultCommands = [
		"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
		"üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
		"üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç",
	];
	const chatId = msg.chat.id;
	const text = msg.text;
	let state = stateController.getState(chatId);

	if (text in clientDefaultCommands) {
		return;
	}
	if (
		msg.photo ||
		msg.document ||
		msg.video ||
		msg.audio ||
		msg.text.startsWith("/")
	) {
		return;
	}

	if (isDefaultCommand(text, clientDefaultCommands) && state) {
		await stateController.clearState(chatId);
		state = null; // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é state –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}
	// Handle different states
	if (state) {
		if (state.state === "awaiting_profile_update") {
			// Update client profile
			const [name, phone] = text.split(";").map((s) => s.trim());
			if (!name || !phone) {
				bot.sendMessage(
					chatId,
					"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–º—è; –¢–µ–ª–µ—Ñ–æ–Ω'."
				);
				return;
			}
			client.name = name;
			client.phone = phone;
			await client.save();
			bot.sendMessage(chatId, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω.");
			stateController.clearState(chatId);
		} else if (state.state === "client_reschedule_date") {
			const newDate = text.trim();
			const dateObj = new Date(newDate);
			if (isNaN(dateObj)) {
				bot.sendMessage(
					chatId,
					"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD."
				);
				return;
			}
			stateController.updateState(chatId, {
				state: "client_reschedule_time",
				newDate,
			});
			bot.sendMessage(
				chatId,
				'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "14:00-15:00"):'
			);
			return;
		} else if (state.state === "client_reschedule_time") {
			const newDate = state.newDate;
			const newTimeSlot = text.trim();
			const booking = await Booking.findById(state.bookingId);
			const photographer = await Photographer.findById(
				booking.photographerId
			);

			// Check if photographer is available
			const schedule = photographer.schedule.find(
				(s) => s.date.toISOString().slice(0, 10) === newDate
			);
			if (!schedule || !schedule.availableSlots.includes(newTimeSlot)) {
				bot.sendMessage(
					chatId,
					"–§–æ—Ç–æ–≥—Ä–∞—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ –≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ."
				);
				return;
			}

			// Update booking
			booking.status = "reschedule_requested";
			booking.reschedule = {
				requestedBy: "client",
				newDate,
				newTimeSlot,
				status: "pending",
			};
			await booking.save();

			let clientUsername = client.telegramUsername
				? `@${client.telegramUsername}`
				: client.phone || "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω";
			bot.sendMessage(
				photographer.telegramId,
				`–ö–ª–∏–µ–Ω—Ç ${client.name} (${clientUsername}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–Ω–æ—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ ${newDate} –≤ ${newTimeSlot}. –ü—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å?`
			);
			bot.sendMessage(
				chatId,
				"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
			);
			stateController.clearState(chatId);
			return;
		}
	}

	// Handle text commands
	if (text === "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏") {
		bot.sendMessage(
			chatId,
			`–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: ${client.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${client.phone}\n\n–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–º—è; –¢–µ–ª–µ—Ñ–æ–Ω'.`
		);
		stateController.setState(chatId, { state: "awaiting_profile_update" });
	} else if (text === "üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è") {
		const bookings = await Booking.find({ clientId: client._id });
		if (bookings.length === 0) {
			bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.");
		} else {
			for (const booking of bookings) {
				let message = `–§–æ—Ç–æ–≥—Ä–∞—Ñ: ${
					booking.photographerName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
				}\n–î–∞—Ç–∞: ${booking.date}\n–í—Ä–µ–º—è: ${booking.timeSlot}\n–°—Ç–∞—Ç—É—Å: ${
					booking.status
				}\n`;

				const buttons = [];
				if (booking.status === "awaiting_prepayment") {
					buttons.push([
						{
							text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
							callback_data: `confirm_booking;${booking._id}`,
						},
					]);
				}

				// Add button for rescheduling
				if (
					[
						"approved",
						"awaiting_prepayment",
						"awaiting_confirmation",
						"confirmed",
					].includes(booking.status)
				) {
					buttons.push([
						{
							text: "–ü–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å",
							callback_data: `client_reschedule;${booking._id}`,
						},
					]);
				}

				// Handle reschedule request from photographer
				if (
					booking.reschedule &&
					booking.reschedule.requestedBy === "photographer" &&
					booking.reschedule.status === "pending"
				) {
					message += `–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∫—É –æ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞: –Ω–æ–≤–∞—è –¥–∞—Ç–∞: ${booking.reschedule.newDate}, –≤—Ä–µ–º—è: ${booking.reschedule.newTimeSlot}\n`;
					buttons.push([
						{
							text: "–ü—Ä–∏–Ω—è—Ç—å",
							callback_data: `accept_reschedule_client;${booking._id}`,
						},
						{
							text: "–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
							callback_data: `decline_reschedule_client;${booking._id}`,
						},
					]);
				}

				if (buttons.length > 0) {
					bot.sendMessage(chatId, message, {
						reply_markup: { inline_keyboard: buttons },
					});
				} else {
					bot.sendMessage(chatId, message);
				}
			}
		}
	}
}

async function handleClientPhoto(bot, msg, client, state) {
	const chatId = msg.chat.id;

	if (state && state.state === "awaiting_payment") {
		const { photographerId, date, timeSlot } = state.bookingInfo;

		if (!msg.photo || msg.photo.length === 0) {
			bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.");
			return;
		}

		const photoId = msg.photo[msg.photo.length - 1].file_id;

		const newBooking = new Booking({
			clientId: client._id,
			photographerId: photographerId,
			date: date,
			timeSlot: timeSlot,
			status: "awaiting_confirmation",
			clientName: client.name,
			photographerName: "",
			paymentScreenshot: photoId,
		});

		const photographer = await Photographer.findById(photographerId);
		if (photographer) {
			newBooking.photographerName = `${photographer.firstName} ${photographer.lastName}`;
		}

		await newBooking.save();
		bot.sendMessage(
			chatId,
			"–°–ø–∞—Å–∏–±–æ! –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞."
		);

		if (photographer) {
			await bot.sendPhoto(
				photographer.telegramId,
				newBooking.paymentScreenshot,
				{
					caption: `–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ *${client.name}* –Ω–∞ *${date}* –≤ *${timeSlot}*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É.`,
					parse_mode: "Markdown",
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
									callback_data: `confirm_payment;${newBooking._id}`,
								},
								{
									text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É",
									callback_data: `reject_payment;${newBooking._id}`,
								},
							],
						],
					},
				}
			);
		}

		stateController.clearState(chatId);
	} else {
		bot.sendMessage(
			chatId,
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞."
		);
	}
}

async function getClientByTelegramId(telegramId) {
	return await Client.findOne({ telegramId: telegramId.toString() });
}

module.exports = {
	handleClientMessage,
	handleClientPhoto,
	getClientByTelegramId,
};
