const TelegramBot = require("node-telegram-bot-api");
const mongoose = require("mongoose");
const clientController = require("./controllers/clientController");
const photographerController = require("./controllers/photographerController");
const callbackHandler = require("./controllers/callbackHandler");
const stateController = require("./controllers/stateController");
const Client = require("./models/client");
const Photographer = require("./models/photographer");
const Booking = require("./models/booking");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot("7456265736:AAH8zdizZ8nvXo2N8kTHmOWIO9yn-1TYYU8", {
	polling: true,
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
mongoose.connect("mongodb://localhost:27017/photography_platform", {
	useNewUrlParser: true,
	useUnifiedTopology: true,
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤
bot.on("message", async (msg) => {
	const chatId = msg.chat.id;
	const client = await clientController.getClientByTelegramId(chatId);
	const state = await stateController.getState(chatId);
	const photographer =
		await photographerController.getPhotographerByTelegramId(chatId);

	if (
		msg.photo ||
		msg.document ||
		msg.video ||
		msg.audio ||
		(msg.text && msg.text.startsWith("/"))
	) {
		return;
	}

	if (client) {
		if (msg.text === "üîç –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤") {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline_keyboard —Å Web App –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤
			bot.sendMessage(
				chatId,
				"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤:",
				{
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "üîç –û—Ç–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤",
									web_app: {
										url: "https://thumbnail-infrastructure-ground-ul.trycloudflare.com",
									},
								},
							],
						],
					},
				}
			);
		} else {
			clientController.handleClientMessage(bot, msg, client);
		}
	} else if (photographer) {
		console.log("AM PHOTO");
		photographerController.handlePhotographerMessage(
			bot,
			msg,
			photographer
		);
	} else {
		if (state && state.state === "registering") {
			switch (state.step) {
				case "get_name":
					// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏
					await stateController.setState(chatId, {
						state: "registering",
						step: "get_phone",
						name: msg.text.trim(),
						referringPhotographerId: state.referringPhotographerId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
					});
					bot.sendMessage(
						chatId,
						"–¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: +123456789):"
					);
					break;
				case "get_phone":
					// –ó–∞–ø–æ–ª–Ω—è–µ–º –º–æ–¥–µ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
					const phone = msg.text.trim();
					if (!/^[+]\d{9,15}$/.test(phone)) {
						bot.sendMessage(
							chatId,
							"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
						);
						return;
					}
					const newClient = new Client({
						telegramId: chatId.toString(),
						name: state.name,
						phone: phone,
						telegramUsername: msg.from.username,
						referringPhotographerId: state.referringPhotographerId, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
					});
					await newClient.save();

					// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
					await stateController.clearState(chatId);

					bot.sendMessage(
						chatId,
						`–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${state.name}!`,
						{
							reply_markup: {
								keyboard: [
									["üîç –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤"],
									["üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", "üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"],
									["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
								],
								one_time_keyboard: false,
								resize_keyboard: true,
							},
						}
					);
					break;
				default:
					bot.sendMessage(
						chatId,
						"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É."
					);
					break;
			}
		} else {
			await stateController.setState(chatId, {
				state: "registering",
				step: "get_name",
			});
			bot.sendMessage(
				chatId,
				"–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ—Å—å. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
			);
		}
	}
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
bot.on("photo", async (msg) => {
	const chatId = msg.chat.id;
	const state = await stateController.getState(chatId);
	console.log(state);
	const client = await Client.findOne({ telegramId: chatId.toString() });
	const photographer = await Photographer.findOne({
		telegramId: chatId.toString(),
	});

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–µ–Ω—Ç–æ–º
	if (client) {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
		if (state && state.state === "awaiting_payment") {
			const bookingId = state.bookingInfo._id; // –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
			const photoId = msg.photo[msg.photo.length - 1].file_id; // ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è —Å–∫—Ä–∏–Ω—à–æ—Ç
			const booking = await Booking.findById(bookingId);
			if (!booking) {
				return bot.sendMessage(
					chatId,
					"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
				);
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
			booking.paymentScreenshot = photoId;
			booking.status = "awaiting_confirmation"; // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
			await booking.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

			// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
			bot.sendMessage(
				chatId,
				"–°–ø–∞—Å–∏–±–æ! –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞."
			);

			// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
			const photographerData = await Photographer.findById(
				booking.photographerId
			);
			if (photographerData) {
				await bot.sendPhoto(photographerData.telegramId, photoId, {
					caption: `–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ *${client.name}* –Ω–∞ *${booking.date}* –≤ *${booking.timeSlot}*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É.`,
					parse_mode: "Markdown",
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
									callback_data: `confirm_payment;${booking._id}`,
								},
								{
									text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É",
									callback_data: `reject_payment;${booking._id}`,
								},
							],
						],
					},
				});
			}

			// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
			await stateController.clearState(chatId);
		} else {
			// –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º
			bot.sendMessage(
				chatId,
				"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞."
			);
		}
	}
	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–º
	else if (photographer) {
		if (state && state.state === "awaiting_portfolio_photos") {
			const tempPhotos = state.tempPhotos || [];
			const photoId = msg.photo[msg.photo.length - 1].file_id;
			tempPhotos.push({ file_id: photoId, title: "", category: "" });

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
			await stateController.setState(chatId, { ...state, tempPhotos });
			await bot.sendMessage(
				chatId,
				"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–ù–∞–∑–≤–∞–Ω–∏–µ; –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ù–∞–∑–≤–∞–Ω–∏–µ; –ö–∞—Ç–µ–≥–æ—Ä–∏—è`.\n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /done, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π.",
				{ parse_mode: "Markdown" }
			);
		} else {
			// –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º
			bot.sendMessage(
				chatId,
				"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ."
			);
		}
	} else {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		bot.sendMessage(
			chatId,
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start."
		);
	}
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
bot.onText(/\/start(?: (.+))?/, async (msg, match) => {
	const chatId = msg.chat.id;
	const inviteData = match[1]; // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å

	// –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —Å photographerId
	if (inviteData) {
		const [type, photographerId] = inviteData.split("_");

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Å—Å—ã–ª–∫–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–º
		if (type === "invite" && photographerId) {
			const photographer = await Photographer.findById(photographerId);
			if (photographer) {
				// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É
				const client = await Client.findOne({
					telegramId: chatId.toString(),
				});

				if (client) {
					client.referringPhotographerId = photographer._id;
					await client.save();
					bot.sendMessage(
						chatId,
						`–í—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É ${photographer.firstName} ${photographer.lastName}.`
					);
				} else {
					// –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
					await stateController.setState(chatId, {
						state: "registering",
						step: "get_name",
						referringPhotographerId: photographer._id, // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
					});
					bot.sendMessage(
						chatId,
						"–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ—Å—å. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
					);
				}
			} else {
				bot.sendMessage(chatId, "–§–æ—Ç–æ–≥—Ä–∞—Ñ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
			}
		}
		return; // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π —á–∞—Å—Ç–∏
	}

	// –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	const client = await Client.findOne({ telegramId: chatId.toString() });
	const photographer = await Photographer.findOne({
		telegramId: chatId.toString(),
	});

	if (client) {
		bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${client.name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`, {
			reply_markup: {
				keyboard: [
					["üîç –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤"],
					["üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", "üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"],
					["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
				],
				one_time_keyboard: false,
				resize_keyboard: true,
			},
		});
	} else if (photographer) {
		bot.sendMessage(
			chatId,
			`–ü—Ä–∏–≤–µ—Ç, ${photographer.firstName}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`,
			{
				reply_markup: {
					keyboard: [
						[{ text: "üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ" }],
						[{ text: "üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" }],
						[{ text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" }],
						[{ text: "üïí –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏" }],
						[{ text: "üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏" }],
						[{ text: "üéü –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è" }],
					],
					resize_keyboard: true,
					one_time_keyboard: false,
				},
			}
		);
	} else {
		// –ï—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
		await stateController.setState(chatId, {
			state: "registering",
			step: "get_name",
		});
		bot.sendMessage(
			chatId,
			"–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ—Å—å. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
		);
	}
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /done
bot.onText(/\/done/, async (msg) => {
	const chatId = msg.chat.id;
	const state = await stateController.getState(chatId);

	if (state && state.state === "awaiting_portfolio_photos") {
		await photographerController.chooseNamingPortfolioPhotos(
			bot,
			chatId,
			"/done",
			state
		);
	} else {
		bot.sendMessage(
			chatId,
			"–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."
		);
	}
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
bot.on("callback_query", (query) => {
	callbackHandler.handleCallbackQuery(bot, query);
});

module.exports = bot;
